/**
 * LlamaIndex Native Tools - Zero Registry, Pure Functional
 * Siguiendo patterns oficiales de LlamaIndex TypeScript
 */

import { tool } from "llamaindex";
import { z } from "zod";

// ===== TOOL CONTEXT TYPE (imported from types.ts) =====
import type { ToolContext, ToolResponse } from './types';
export type { ToolContext, ToolResponse };

// ===== TOOL FACTORIES WITH CONTEXT INJECTION =====

export const createScheduleReminderTool = (context: ToolContext) => tool(
  async ({ title, date, time, email }: any) => {
    const { scheduleReminderHandler } = await import('./handlers/denik');
    const result = await scheduleReminderHandler({ title, date, time, email }, context);
    return result.message;
  },
  {
    name: "schedule_reminder",
    description: "Crear un nuevo recordatorio o cita en el calendario",
    parameters: z.object({
      title: z.string().describe("T√≠tulo del recordatorio o cita"),
      date: z.string().describe("Fecha en formato YYYY-MM-DD (ej: 2025-08-23)"),
      time: z.string().describe("Hora en formato HH:MM (24 horas)"),
      email: z.string().describe("Email para enviar notificaci√≥n - REQUERIDO")
    })
  }
);

export const createListRemindersTool = (context: ToolContext) => tool(
  async () => {
    const { listRemindersHandler } = await import('./handlers/reminder-management');
    const result = await listRemindersHandler({}, context);
    return result.message;
  },
  {
    name: "list_reminders",
    description: "Consultar todos los recordatorios pendientes del usuario",
    parameters: z.object({})
  }
);

export const createUpdateReminderTool = (context: ToolContext) => tool(
  async ({ id, title, date, time, email }) => {
    const { updateReminderHandler } = await import('./handlers/reminder-management');
    const result = await updateReminderHandler({ id, title, date, time, email }, context);
    return result.message;
  },
  {
    name: "update_reminder",
    description: "Modificar un recordatorio existente (fecha, hora, t√≠tulo, email)",
    parameters: z.object({
      id: z.string().describe("ID del recordatorio a actualizar"),
      title: z.string().optional().describe("Nuevo t√≠tulo del recordatorio"),
      date: z.string().optional().describe("Nueva fecha en formato YYYY-MM-DD"),
      time: z.string().optional().describe("Nueva hora en formato HH:MM"),
      email: z.string().optional().describe("Nuevo email para notificaci√≥n")
    })
  }
);

export const createCancelReminderTool = (context: ToolContext) => tool(
  async ({ id }) => {
    const { cancelReminderHandler } = await import('./handlers/reminder-management');
    const result = await cancelReminderHandler({ id }, context);
    return result.message;
  },
  {
    name: "cancel_reminder",
    description: "Cancelar un recordatorio (mantiene en DB como 'cancelled')",
    parameters: z.object({
      id: z.string().describe("ID del recordatorio a cancelar")
    })
  }
);

export const createDeleteReminderTool = (context: ToolContext) => tool(
  async ({ id }) => {
    const { deleteReminderHandler } = await import('./handlers/reminder-management');
    const result = await deleteReminderHandler({ id }, context);
    return result.message;
  },
  {
    name: "delete_reminder",
    description: "Eliminar permanentemente un recordatorio de la base de datos",
    parameters: z.object({
      id: z.string().describe("ID del recordatorio a eliminar permanentemente")
    })
  }
);

// ===== PAYMENT TOOLS =====

// Tool para planes de Formmy (Ghosty cobra upgrades/planes)
export const createFormmyPlanPaymentTool = (context: ToolContext) => tool(
  async ({ planName }) => {
    const { createFormmyPlanPaymentHandler } = await import('./handlers/formmy-plans');
    const result = await createFormmyPlanPaymentHandler({ planName }, context);
    return result.message;
  },
  {
    name: "create_formmy_plan_payment",
    description: `Genera un link de pago para que el usuario mejore su plan de Formmy (STARTER, PRO o ENTERPRISE).

**CU√ÅNDO USAR ESTA HERRAMIENTA:**
- Usuario quiere upgrade: "quiero el plan Pro", "c√°mbieme a STARTER", "necesito m√°s conversaciones"
- Usuario pide link de pago: "dame el link para pagar Pro", "c√≥mo compro Enterprise"
- Usuario pregunta por compra: "¬øpuedo pagar el plan Starter?", "quiero comprar PRO"
- Frases clave: plan, upgrade, mejorar, comprar, pagar, STARTER, PRO, ENTERPRISE

**PLANES DISPONIBLES:**
‚Ä¢ **STARTER** - $149 MXN/mes: Solo formularios (sin chatbots)
‚Ä¢ **PRO** - $499 MXN/mes: 10 chatbots, 250 conversaciones, 1000 cr√©ditos, 30 min voz
‚Ä¢ **ENTERPRISE** - $2,490 MXN/mes: Chatbots ilimitados, 1000 conversaciones, 5000 cr√©ditos, 60 min voz

**EJEMPLOS DE USO:**
‚úÖ "Quiero el plan Pro" ‚Üí planName: "PRO"
‚úÖ "Dame el link para pagar Starter" ‚Üí planName: "STARTER"
‚úÖ "¬øPuedo comprar Enterprise?" ‚Üí planName: "ENTERPRISE"
‚úÖ "C√°mbieme a PRO" ‚Üí planName: "PRO"

**IMPORTANTE:**
- Solo acepta planName: "STARTER", "PRO" o "ENTERPRISE" (case-insensitive)
- Usa Stripe de Formmy autom√°ticamente (NO requiere configuraci√≥n del usuario)
- Disponible para TODOS los usuarios (FREE, STARTER, PRO)`,
    parameters: z.object({
      planName: z.string().describe("Nombre del plan: 'STARTER', 'PRO' o 'ENTERPRISE' (case-insensitive)")
    })
  }
);

// Tool para pagos del usuario (chatbots cobran a SUS clientes) - PENDIENTE
export const createPaymentLinkTool = (context: ToolContext) => tool(
  async ({ amount, description, currency = "mxn" }) => {
    const { createPaymentLinkHandler } = await import('./handlers/stripe');
    const result = await createPaymentLinkHandler({ amount, description, currency }, context);
    return result.message;
  },
  {
    name: "create_payment_link",
    description: `Genera un link de pago seguro con Stripe para que el cliente pueda pagar con tarjeta de cr√©dito/d√©bito.

**CU√ÅNDO USAR ESTA HERRAMIENTA:**
- Usuario solicita expl√≠citamente: "crea un link de pago", "genera un link de pago", "quiero cobrar"
- Usuario pregunta: "¬øpuedo pagar con tarjeta?", "¬øc√≥mo pago?", "necesito un payment link"
- Usuario menciona montos: "quiero pagar $500", "cu√°nto cuesta el plan Pro"
- Frases clave: link de pago, payment link, cobrar, pagar, tarjeta, stripe, checkout

**QU√â GENERA:**
- Link de pago de Stripe seguro y listo para compartir
- Widget interactivo con bot√≥n "Pagar ahora"
- V√°lido indefinidamente (no expira)
- Acepta tarjetas de cr√©dito/d√©bito

**EJEMPLOS DE USO:**
‚úÖ "Crea un link de pago de $500 MXN para el plan Pro" ‚Üí USAR ESTA TOOL
‚úÖ "Necesito cobrar $1,000 por consultor√≠a" ‚Üí USAR ESTA TOOL
‚úÖ "¬øPuedo pagar con tarjeta?" ‚Üí USAR ESTA TOOL (generar link para que el usuario pague)
‚úÖ "Genera un payment link de $299 USD" ‚Üí USAR ESTA TOOL

**IMPORTANTE:** Despu√©s de generar el link, COPIA EXACTA del mensaje que retorna la herramienta (incluye el marcador de widget üé®).`,
    parameters: z.object({
      amount: z.number().describe("Cantidad a cobrar en n√∫meros enteros (ej: 500, 1000, 299)"),
      description: z.string().describe("Descripci√≥n clara del pago o servicio (ej: 'Plan Pro mensual', 'Consultor√≠a 1 hora')"),
      currency: z.string().default("mxn").describe("Moneda del pago: 'mxn' para pesos mexicanos, 'usd' para d√≥lares (default: 'mxn')")
    })
  }
);

// ===== CONTACT TOOLS =====

export const createSaveContactTool = (context: ToolContext) => tool(
  async ({ name, email, phone, company, position, website, notes }) => {
    const { saveContactInfoHandler } = await import('./handlers/contact');
    const result = await saveContactInfoHandler({ name, email, phone, company, position, website, notes }, context);
    return result.message;
  },
  {
    name: "save_contact_info",
    description: "‚ö†Ô∏è SOLO usar cuando el usuario EXPL√çCITAMENTE diga 'guarda mi email', 'anota mi tel√©fono', etc. y proporcione datos de contacto reales. NO usar para solicitudes de informaci√≥n, planes, o pagos. NO inventar datos. Requiere email O phone v√°lido proporcionado por el usuario.",
    parameters: z.object({
      name: z.string().optional().describe("Nombre completo proporcionado por el usuario"),
      email: z.string().optional().describe("Email REAL proporcionado por el usuario - REQUERIDO si no hay phone"),
      phone: z.string().optional().describe("Tel√©fono REAL proporcionado por el usuario - REQUERIDO si no hay email"),
      company: z.string().optional().describe("Empresa mencionada por el usuario"),
      position: z.string().optional().describe("Cargo mencionado por el usuario"),
      website: z.string().optional().describe("Website mencionado por el usuario"),
      notes: z.string().optional().describe("Notas adicionales del contexto")
    })
  }
);

// ===== DATETIME TOOLS =====

export const createGetCurrentDateTimeTool = (context: ToolContext) => tool(
  async () => {
    const { getCurrentDateTimeHandler } = await import('./handlers/datetime');
    const result = await getCurrentDateTimeHandler({}, context);
    return result.message;
  },
  {
    name: "get_current_datetime",
    description: "Obtener la fecha y hora actual (timezone M√©xico GMT-6) para contextualizar respuestas",
    parameters: z.object({})
  }
);

// ===== WEB SEARCH TOOLS =====

export const createGoogleSearchTool = (context: ToolContext) => tool(
  async ({ query, numResults = 5 }) => {
    const { googleSearchHandler } = await import('./handlers/google-search');
    const result = await googleSearchHandler({ query, numResults }, context);
    return result.message;
  },
  {
    name: "web_search_google",
    description: "Buscar informaci√≥n actualizada en Google. √ötil para responder preguntas sobre eventos actuales, noticias, datos recientes o informaci√≥n que no est√° en el contexto del chatbot",
    parameters: z.object({
      query: z.string().describe("Consulta de b√∫squeda en Google (keywords o pregunta)"),
      numResults: z.number().optional().default(5).describe("N√∫mero de resultados a obtener (1-10, default: 5)")
    })
  }
);

// ===== CONTEXT SEARCH TOOLS (RAG) =====

export const createContextSearchTool = (context: ToolContext) => tool(
  async ({ query, topK = 5 }) => {
    const { contextSearchHandler } = await import('./handlers/context-search');
    const result = await contextSearchHandler({ query, topK }, context);
    return result.message;
  },
  {
    name: "search_context",
    description: `üîç HERRAMIENTA PRINCIPAL - B√∫squeda sem√°ntica en la base de conocimiento del chatbot.

‚ö†Ô∏è REGLA CR√çTICA: Esta herramienta debe ser tu PRIMERA OPCI√ìN para responder preguntas sobre el negocio.

üìã USAR OBLIGATORIAMENTE cuando el usuario pregunta sobre:
- Productos, servicios, caracter√≠sticas, actualizaciones, roadmap
- Precios, planes, costos, pol√≠ticas de pago
- Documentaci√≥n, tutoriales, gu√≠as, FAQs
- Pol√≠ticas de la empresa, t√©rminos, condiciones
- Informaci√≥n del equipo, empresa, historia
- CUALQUIER dato espec√≠fico del negocio

üö´ PROHIBIDO responder SIN buscar sobre estos temas. Si no buscas, fallas.

üéØ ESTRATEGIA AG√âNTICA (OBLIGATORIA):
1. Ejecuta search_context ANTES de formular respuesta
2. Si pregunta compleja ‚Üí DIVIDE en sub-preguntas ‚Üí BUSCA CADA UNA
3. Si resultados insuficientes ‚Üí REFORMULA query ‚Üí BUSCA DE NUEVO
4. Haz M√çNIMO 2 b√∫squedas para preguntas multi-tema
5. Combina resultados para respuesta completa

üìä EJEMPLOS CORRECTOS:
‚úÖ User: "caracter√≠sticas nuevas" ‚Üí search_context("caracter√≠sticas nuevas actualizaciones features")
‚úÖ User: "planes y precios" ‚Üí search_context("planes") + search_context("precios") ‚Üí combinar
‚úÖ User: "compara X vs Y" ‚Üí search_context("X") + search_context("Y") ‚Üí tabla comparativa

‚ùå ERRORES CR√çTICOS A EVITAR:
- No buscar antes de responder sobre el negocio
- Decir "no tengo informaci√≥n" sin intentar buscar
- Una sola b√∫squeda gen√©rica para pregunta compleja
- Redirigir al usuario a "buscar en el sitio" en lugar de buscar t√∫ mismo`,
    parameters: z.object({
      query: z.string().describe("Consulta espec√≠fica y precisa. Usa keywords relevantes. Ejemplo: 'caracter√≠sticas nuevas actualizaciones 2025' mejor que solo 'novedades'"),
      topK: z.number().optional().default(5).describe("Resultados a obtener (1-10). Usa 3 para b√∫squeda espec√≠fica, 5-7 para tema amplio, 10 para investigaci√≥n exhaustiva.")
    })
  }
);

// ===== USAGE LIMITS TOOLS =====

export const createGetUsageLimitsTool = (context: ToolContext) => tool(
  async () => {
    const { getUsageLimitsHandler } = await import('./handlers/usage-limits');
    const result = await getUsageLimitsHandler({}, context);
    return result.message;
  },
  {
    name: "get_usage_limits",
    description: "Consultar l√≠mites del plan y uso actual (conversaciones restantes, cr√©ditos, fecha de reset). √ötil cuando el usuario pregunta cu√°ntas conversaciones le quedan, cu√°l es su l√≠mite mensual, o cu√°ndo se reinicia su contador.",
    parameters: z.object({})
  }
);

// ===== CHATBOT TOOLS =====

export const createQueryChatbotsTool = (context: ToolContext) => tool(
  async ({ status, orderBy, limit, includeStats }) => {
    const { queryChatbotsHandler } = await import('./handlers/chatbot-query');
    const result = await queryChatbotsHandler({ status, orderBy, limit, includeStats }, context);
    return result.message;
  },
  {
    name: "query_chatbots",
    description: "Consultar y listar los chatbots del usuario con filtros y estad√≠sticas",
    parameters: z.object({
      status: z.enum(['all', 'active', 'inactive', 'draft']).optional().default('all').describe("Filtrar por estado del chatbot"),
      orderBy: z.enum(['name', 'conversations', 'created', 'updated']).optional().default('updated').describe("Ordenar por campo"),
      limit: z.number().optional().default(10).describe("L√≠mite de resultados (m√°ximo 20)"),
      includeStats: z.boolean().optional().default(true).describe("Incluir estad√≠sticas b√°sicas")
    })
  }
);

export const createGetChatbotStatsTool = (context: ToolContext) => tool(
  async ({ chatbotId, period, compareWithPrevious, includeHourlyBreakdown }) => {
    const { getChatbotStatsHandler } = await import('./handlers/chatbot-stats');
    const result = await getChatbotStatsHandler({ chatbotId, period, compareWithPrevious, includeHourlyBreakdown }, context);
    return result.message;
  },
  {
    name: "get_chatbot_stats",
    description: "Obtener estad√≠sticas detalladas de conversaciones de chatbots (m√©tricas, comparaciones, an√°lisis)",
    parameters: z.object({
      chatbotId: z.string().optional().describe("ID espec√≠fico del chatbot (si no se provee, analiza todos)"),
      period: z.enum(['week', 'month', 'quarter', 'year']).optional().default('week').describe("Per√≠odo de an√°lisis"),
      compareWithPrevious: z.boolean().optional().default(true).describe("Comparar con per√≠odo anterior"),
      includeHourlyBreakdown: z.boolean().optional().default(false).describe("Incluir breakdown por horas del d√≠a")
    })
  }
);

// ===== REPORT GENERATION TOOLS =====

export const createGenerateChatbotReportTool = (context: ToolContext) => tool(
  async ({ format, includeMetrics }) => {
    const { handleGenerateChatbotReport } = await import('./handlers/generate-chatbot-report');
    const result = await handleGenerateChatbotReport({ format, includeMetrics }, context);

    // Si fue exitoso, retornar estructura con datos de descarga
    if (result.success && result.data) {
      return `‚úÖ **Reporte generado exitosamente**

üìä **Resumen:**
‚Ä¢ Chatbots analizados: **${result.data.chatbotsCount}**
‚Ä¢ Total conversaciones: **${result.data.totalConversations}**
‚Ä¢ Total mensajes: **${result.data.totalMessages}**
‚Ä¢ Tama√±o del archivo: **${result.data.size}**

üì• **[DESCARGAR REPORTE PDF ‚Üí](${result.data.downloadUrl})**

‚è±Ô∏è El enlace expira en ${result.data.expiresIn}. Desc√°rgalo ahora para guardarlo.`;
    }

    return result.message;
  },
  {
    name: "generate_chatbot_report",
    description: `Genera un archivo PDF descargable con la lista completa de chatbots del usuario y sus m√©tricas detalladas.

**CU√ÅNDO USAR ESTA HERRAMIENTA:**
- Usuario pide expl√≠citamente: "genera un reporte", "dame un PDF", "quiero un documento", "exporta mis chatbots"
- Usuario pregunta: "¬øpuedes darme un resumen descargable?", "quiero ver mis stats en PDF"
- Frases clave: reporte, PDF, archivo, documento, descarga, export, exportar

**QU√â GENERA:**
- Archivo PDF profesional descargable
- Lista de todos los chatbots con nombres, fechas de creaci√≥n, conversaciones
- M√©tricas agregadas: totales, promedios, estad√≠sticas generales
- V√°lido por 5 minutos (one-time download)

**IMPORTANTE:** Despu√©s de generar el reporte, SIEMPRE retorna el link de descarga en formato markdown para que sea clicable.`,
    parameters: z.object({
      format: z.enum(['pdf']).optional().default('pdf').describe("Formato del reporte (actualmente solo PDF)"),
      includeMetrics: z.boolean().optional().default(true).describe("Incluir m√©tricas agregadas (totales, promedios)")
    })
  }
);

// ===== WHATSAPP TOOLS - DEPRECADO =====
// Composio WhatsApp fue eliminado - usar WhatsAppSDKService directo

// ===== GMAIL TOOLS (COMPOSIO INTEGRATION) =====

export const createSendGmailTool = (context: ToolContext) => tool(
  async ({ recipient_email, subject, body, cc, bcc, is_html, chatbotId }) => {
    const { sendGmailHandler } = await import('./handlers/gmail');
    const result = await sendGmailHandler({ recipient_email, subject, body, cc, bcc, is_html, chatbotId }, context);
    return result.message;
  },
  {
    name: "send_gmail",
    description: `Enviar email usando la cuenta de Gmail del usuario conectada al chatbot.

**CU√ÅNDO USAR ESTA HERRAMIENTA:**
- Usuario pide expl√≠citamente: "env√≠a un email", "manda un correo", "escribe un email a"
- Usuario proporciona destinatario y contenido del mensaje
- Frases clave: enviar email, mandar correo, escribir email, contactar por email, enviar por Gmail

**REQUISITOS:**
- El chatbot debe tener Gmail conectado v√≠a Composio OAuth2
- Usuario debe haber autorizado acceso a Gmail (OAuth)
- Al menos un destinatario (recipient_email, cc, o bcc)
- Al menos subject O body debe estar presente

**IMPORTANTE:**
- SOLO funciona si el chatbot tiene integraci√≥n de Gmail activa
- El email se env√≠a desde la cuenta de Gmail del usuario que autoriz√≥
- Si usa HTML, debe especificar is_html: true
- Si el usuario no tiene Gmail configurado, orientarlo a la secci√≥n de Integraciones`,
    parameters: z.object({
      recipient_email: z.string().describe("Email del destinatario principal (ej: usuario@example.com)"),
      subject: z.string().optional().describe("Asunto del email"),
      body: z.string().optional().describe("Contenido del email (texto plano o HTML)"),
      cc: z.array(z.string()).optional().describe("Lista de emails en copia (CC)"),
      bcc: z.array(z.string()).optional().describe("Lista de emails en copia oculta (BCC)"),
      is_html: z.boolean().optional().default(false).describe("true si el body contiene HTML, false para texto plano"),
      chatbotId: z.string().optional().describe("ID del chatbot (solo para Ghosty enviando en nombre de otros chatbots)")
    })
  }
);

export const createReadGmailTool = (context: ToolContext) => tool(
  async ({ query, max_results, label_ids, chatbotId }) => {
    const { readGmailHandler } = await import('./handlers/gmail');
    const result = await readGmailHandler({ query, max_results, label_ids, chatbotId }, context);
    return result.message;
  },
  {
    name: "read_gmail",
    description: `Leer y buscar emails en la cuenta de Gmail del usuario.

**CU√ÅNDO USAR ESTA HERRAMIENTA:**
- Usuario pregunta: "mis √∫ltimos emails", "busca emails de", "revisa mi Gmail", "qu√© emails tengo"
- Usuario quiere buscar: "emails sobre [tema]", "mensajes de [persona]", "correos recientes"
- Frases clave: leer Gmail, buscar emails, revisar correo, √∫ltimos mensajes, inbox

**B√öSQUEDAS SOPORTADAS:**
- Por remitente: "from:usuario@example.com"
- Por asunto: "subject:importante"
- Por contenido: cualquier palabra clave
- Combinaciones: "from:juan subject:reuni√≥n"

**ETIQUETAS COMUNES:**
- INBOX: Bandeja de entrada (default)
- SENT: Emails enviados
- SPAM: Correo no deseado
- TRASH: Papelera
- UNREAD: No le√≠dos

**QU√â RETORNA:**
- Lista de emails con remitente, asunto y preview
- M√°ximo 10 emails por b√∫squeda
- Ordenados por fecha (m√°s recientes primero)`,
    parameters: z.object({
      query: z.string().optional().describe("B√∫squeda (ej: 'from:juan@example.com', 'subject:importante', 'reuni√≥n')"),
      max_results: z.number().optional().default(5).describe("N√∫mero de emails a retornar (m√°ximo 10)"),
      label_ids: z.array(z.string()).optional().describe("Etiquetas a filtrar (ej: ['INBOX', 'UNREAD'])"),
      chatbotId: z.string().optional().describe("ID del chatbot (solo para Ghosty)")
    })
  }
);

/**
 * Funci√≥n para obtener tools seg√∫n plan del usuario con context injection
 * Plan-aware tool selection funcional
 *
 * @param userPlan - Plan del usuario visitante (puede ser ANONYMOUS)
 * @param integrations - Integraciones activas del chatbot
 * @param context - Contexto de ejecuci√≥n del tool
 * @param chatbotOwnerPlan - Plan del due√±o del chatbot (para usuarios an√≥nimos)
 */
export const getToolsForPlan = (
  userPlan: string,
  integrations: Record<string, any> = {},
  context: ToolContext,
  chatbotOwnerPlan?: string // ‚úÖ NUEVO: Plan del due√±o del chatbot
) => {
  // üéØ Para usuarios an√≥nimos, usar el plan del DUE√ëO del chatbot
  const effectivePlan = userPlan === 'ANONYMOUS' && chatbotOwnerPlan
    ? chatbotOwnerPlan
    : userPlan;

  console.log(`\n${'üîß'.repeat(40)}`);
  console.log(`üîß [getToolsForPlan] CONSTRUYENDO TOOLS`);
  console.log(`   context.isGhosty: ${context.isGhosty}`);
  console.log(`   context.chatbotId: ${context.chatbotId}`);
  console.log(`   userPlan: ${userPlan}`);
  console.log(`   chatbotOwnerPlan: ${chatbotOwnerPlan || 'N/A'}`);
  console.log(`   effectivePlan (usado): ${effectivePlan}`);
  console.log(`${'üîß'.repeat(40)}\n`);

  const tools = [];

  // Reminder tools - SOLO para Ghosty (gesti√≥n de agenda privada)
  // ‚ùå Chatbots p√∫blicos NO deben acceder a la agenda personal del due√±o
  if (context.isGhosty && ['PRO', 'ENTERPRISE', 'TRIAL'].includes(userPlan)) {
    tools.push(
      createScheduleReminderTool(context),
      createListRemindersTool(context),
      createUpdateReminderTool(context),
      createCancelReminderTool(context),
      createDeleteReminderTool(context)
    );
  }

  // Formmy Plan Payment - SOLO para Ghosty, disponible para TODOS los planes
  // Permite a cualquier usuario generar links de pago para upgrade/planes
  if (context.isGhosty) {
    tools.push(createFormmyPlanPaymentTool(context));
  }

  // Payment tools (usuario cobra a SUS clientes) - PENDIENTE IMPLEMENTACI√ìN
  // Solo para chatbots p√∫blicos con plan PRO+ y Stripe configurado
  if (!context.isGhosty && ['PRO', 'ENTERPRISE', 'TRIAL'].includes(effectivePlan) && integrations.stripe) {
    tools.push(createPaymentLinkTool(context));
  }

  // Contact tools - disponibles para chatbots p√∫blicos ANONYMOUS/STARTER+
  // ‚ùå Ghosty NO necesita esto (usuario ya autenticado)
  if (!context.isGhosty && ['ANONYMOUS', 'STARTER', 'PRO', 'ENTERPRISE', 'TRIAL'].includes(effectivePlan)) {
    tools.push(createSaveContactTool(context));
  }

  // DateTime tools - disponibles para chatbots p√∫blicos ANONYMOUS/STARTER+
  // ‚ùå Ghosty NO necesita esto (no requiere fecha/hora para sus tareas)
  if (!context.isGhosty && ['ANONYMOUS', 'STARTER', 'PRO', 'ENTERPRISE', 'TRIAL'].includes(effectivePlan)) {
    tools.push(createGetCurrentDateTimeTool(context));
  }

  // Google Search tools - disponibles para chatbots p√∫blicos ANONYMOUS/STARTER+ con API configurada
  // ‚ùå Ghosty NO necesita esto (ya conoce toda la info de Formmy)
  if (!context.isGhosty && ['ANONYMOUS', 'STARTER', 'PRO', 'ENTERPRISE', 'TRIAL'].includes(effectivePlan) &&
      process.env.GOOGLE_SEARCH_API_KEY &&
      process.env.GOOGLE_SEARCH_ENGINE_ID) {
    tools.push(createGoogleSearchTool(context));
  }

  // Context Search (RAG) - ‚úÖ CR√çTICO: Usar effectivePlan (plan del due√±o) para usuarios an√≥nimos
  // Requiere vector search index en MongoDB Atlas
  if (['PRO', 'ENTERPRISE', 'TRIAL'].includes(effectivePlan) && context.chatbotId) {
    tools.push(createContextSearchTool(context));
  }

  // Usage Limits - SOLO para Ghosty (informaci√≥n del plan del usuario)
  if (context.isGhosty && ['FREE', 'STARTER', 'PRO', 'ENTERPRISE', 'TRIAL'].includes(userPlan)) {
    tools.push(createGetUsageLimitsTool(context));
  }

  // Chatbot tools - SOLO para Ghosty (asistente interno)
  // ‚ùå Chatbots p√∫blicos NO deben tener acceso a estad√≠sticas privadas
  if (context.isGhosty && ['STARTER', 'PRO', 'ENTERPRISE', 'TRIAL'].includes(userPlan)) {
    tools.push(
      createQueryChatbotsTool(context),
      createGetChatbotStatsTool(context)
    );
  }

  // Report generation tools - SOLO para Ghosty (reportes privados del usuario)
  if (context.isGhosty && ['PRO', 'ENTERPRISE', 'TRIAL'].includes(userPlan)) {
    console.log("üìÑ [getToolsForPlan] Agregando generate_chatbot_report tool");
    tools.push(
      createGenerateChatbotReportTool(context)
    );
  }

  // WhatsApp tools - DEPRECADO (Composio WhatsApp eliminado)
  // WhatsApp ahora usa WhatsAppSDKService directo sin Composio

  // Gmail tools - Para chatbots p√∫blicos con Gmail conectado v√≠a OAuth2
  // Ghosty puede enviar/leer Gmail en nombre de chatbots del usuario
  if (context.isGhosty && ['PRO', 'ENTERPRISE', 'TRIAL'].includes(userPlan)) {
    console.log("üìß [getToolsForPlan] Agregando Gmail tools para Ghosty");
    tools.push(
      createSendGmailTool(context),
      createReadGmailTool(context)
    );
  } else if (!context.isGhosty && ['PRO', 'ENTERPRISE', 'TRIAL'].includes(effectivePlan) && integrations.gmail) {
    console.log("üìß [getToolsForPlan] Agregando Gmail tools para chatbot p√∫blico");
    tools.push(
      createSendGmailTool(context),
      createReadGmailTool(context)
    );
  }

  const toolNames = tools.map((t: any) => t?.metadata?.name || t?.name || "unknown");
  console.log(`üõ†Ô∏è  [getToolsForPlan] ${tools.length} tools disponibles para ${userPlan} (effectivePlan: ${effectivePlan}):`, toolNames);

  return tools;
};

/**
 * Debug: Lista de todas las tools disponibles
 */
export const getAllToolNames = () => [
  'schedule_reminder',
  'list_reminders',
  'update_reminder',
  'cancel_reminder',
  'delete_reminder',
  'create_formmy_plan_payment', // Tool para planes de Formmy
  'create_payment_link', // Pendiente: para chatbots del usuario
  'save_contact_info',
  'get_usage_limits',
  'query_chatbots',
  'get_chatbot_stats',
  'get_current_datetime',
  'web_search_google',
  'search_context',
  'generate_chatbot_report',
  // WhatsApp tools DEPRECADO - Composio eliminado
  'send_gmail', // Gmail via Composio OAuth2
  'read_gmail' // Gmail via Composio OAuth2
];