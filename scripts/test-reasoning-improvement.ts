/**
 * Test para mejorar capacidades de razonamiento expl√≠cito del agente
 */

import { chatWithLlamaIndexV2 } from '../server/llamaindex-engine-v2/index';

const enhancedChatbot = {
  id: '66f6a7b8c1234567890abcdf',
  name: 'Enhanced Reasoning Bot',
  aiModel: 'gpt-5-nano',
  temperature: 1,
  instructions: `Eres un asistente inteligente que SIEMPRE explica su razonamiento paso a paso.

REGLAS CR√çTICAS DE RAZONAMIENTO:
1. SIEMPRE explica por qu√© tomas cada decisi√≥n
2. MUESTRA tu proceso de pensamiento antes de actuar
3. JUSTIFICA las fechas, horarios y opciones que eliges
4. USA formato: "Analizando... ‚Üí Decidiendo... ‚Üí Ejecutando..."`,
  customInstructions: `Cuando tengas que elegir fechas o resolver problemas complejos:

1. **ANALIZA** las restricciones dadas
2. **EVAL√öA** las opciones disponibles
3. **EXPLICA** por qu√© eliges esa opci√≥n
4. **EJECUTA** la herramienta
5. **CONFIRMA** el resultado

Ejemplo: "Analizando tus restricciones: despu√©s del 18/09, antes del 25/09, martes o mi√©rcoles, horario 9am-5pm. Las opciones son: martes 23/09 o mi√©rcoles 24/09. Elijo martes 23/09 porque..."`,
  integrations: {}
};

const realUser = {
  id: '66f6a7b8c1234567890abcde',
  plan: 'PRO',
  email: 'test@formmy.app'
};

async function testReasoningImprovement() {
  console.log('üß† TESTING ENHANCED REASONING CAPABILITIES\n');

  // Test 1: Problema complejo de optimizaci√≥n
  console.log('--- Test 1: Optimizaci√≥n Compleja ---');
  const optimizationMessage = `
    Ay√∫dame a optimizar mi semana. Tengo estas restricciones:
    - Reuni√≥n importante debe ser lunes, martes o mi√©rcoles
    - No puedo reuniones despu√©s de las 4pm los lunes
    - Los martes son mejores para reuniones largas
    - Prefiero las ma√±anas para temas importantes
    - Necesito 2 horas para preparar antes de cualquier reuni√≥n

    Programa: 1) La reuni√≥n de presupuesto (2 horas) y 2) El tiempo de preparaci√≥n.
    Explica paso a paso tu razonamiento.
  `;

  try {
    console.log(`üß† Complex optimization: "${optimizationMessage.trim().substring(0, 100)}..."`);

    const result = await chatWithLlamaIndexV2(
      optimizationMessage.trim(),
      enhancedChatbot,
      realUser,
      {
        stream: false,
        conversationHistory: []
      }
    );

    console.log('\nüìä REASONING RESULT:');
    console.log('- Tools used:', result.toolsUsed?.length || 0);
    console.log('- Processing time:', result.processingTime);
    console.log('- Content length:', result.content?.length || 0);

    console.log('\nüí≠ REASONING ANALYSIS:');
    console.log(result.content);

    // Analizar calidad del razonamiento
    const reasoningIndicators = [
      result.content?.includes('Analizando'),
      result.content?.includes('porque'),
      result.content?.includes('restricciones'),
      result.content?.includes('opciones'),
      result.content?.includes('elijo') || result.content?.includes('decido'),
      result.content?.includes('martes') && result.content?.includes('mejor'),
      result.content?.includes('preparaci√≥n')
    ];

    const reasoningScore = reasoningIndicators.filter(Boolean).length;
    console.log(`\nüéØ REASONING SCORE: ${reasoningScore}/7`);

    if (reasoningScore >= 5) {
      console.log('‚úÖ EXCELLENT: Agent shows detailed reasoning');
    } else if (reasoningScore >= 3) {
      console.log('‚ö†Ô∏è GOOD: Agent shows some reasoning');
    } else {
      console.log('‚ùå POOR: Agent lacks reasoning explanation');
    }

    // Verificar acciones en BD
    const { db } = await import('../app/utils/db.server');
    const recentActions = await db.scheduledAction.findMany({
      where: {
        chatbotId: enhancedChatbot.id,
        createdAt: {
          gte: new Date(Date.now() - 2 * 60 * 1000)
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüíæ Actions created: ${recentActions.length}`);
    for (const action of recentActions) {
      const data = action.data as any;
      console.log(`- ${data.title}: ${data.date}`);
    }

  } catch (error) {
    console.error('‚ùå Reasoning test failed:', error);
  }

  console.log('\n');

  // Test 2: Decisi√≥n con m√∫ltiples criterios
  console.log('--- Test 2: Decisi√≥n Multi-Criterio ---');
  const multiCriteriaMessage = `
    Necesito elegir entre 3 opciones para mi reuni√≥n semanal:

    Opci√≥n A: Lunes 10am (sala peque√±a disponible, pero hay tr√°fico)
    Opci√≥n B: Martes 2pm (sala grande disponible, hora post-almuerzo)
    Opci√≥n C: Mi√©rcoles 9am (sala mediana, mejor d√≠a para decisiones)

    Eval√∫a cada opci√≥n seg√∫n: disponibilidad, productividad, log√≠stica.
    Dame tu recomendaci√≥n con razonamiento completo y programa la elegida.
  `;

  try {
    console.log(`üéØ Multi-criteria decision: "${multiCriteriaMessage.trim().substring(0, 80)}..."`);

    const result = await chatWithLlamaIndexV2(
      multiCriteriaMessage.trim(),
      enhancedChatbot,
      realUser,
      {
        stream: false,
        conversationHistory: []
      }
    );

    console.log('\nüìä DECISION RESULT:');
    console.log('- Processing time:', result.processingTime);
    console.log('- Tools used:', result.toolsUsed?.length || 0);

    console.log('\nüéØ DECISION ANALYSIS:');
    console.log(result.content);

    // Analizar estructura de decisi√≥n
    const decisionStructure = [
      result.content?.includes('Opci√≥n A') || result.content?.includes('Lunes'),
      result.content?.includes('Opci√≥n B') || result.content?.includes('Martes'),
      result.content?.includes('Opci√≥n C') || result.content?.includes('Mi√©rcoles'),
      result.content?.includes('eval√∫') || result.content?.includes('analiz'),
      result.content?.includes('recomend') || result.content?.includes('mejor'),
      result.content?.includes('porque') || result.content?.includes('ya que'),
      result.content?.includes('productividad') || result.content?.includes('log√≠stica')
    ];

    const structureScore = decisionStructure.filter(Boolean).length;
    console.log(`\nüìã DECISION STRUCTURE: ${structureScore}/7`);

    if (structureScore >= 5) {
      console.log('‚úÖ EXCELLENT: Systematic decision-making');
    } else if (structureScore >= 3) {
      console.log('‚ö†Ô∏è GOOD: Some systematic approach');
    } else {
      console.log('‚ùå POOR: Lacks systematic evaluation');
    }

  } catch (error) {
    console.error('‚ùå Decision test failed:', error);
  }

  console.log('\nüß† Enhanced reasoning testing completed');
}

testReasoningImprovement().catch(console.error);