/**
 * Test E2E de RAG Ag√©ntico
 * Verifica que el agente ejecute m√∫ltiples b√∫squedas para responder preguntas complejas
 */

import { db } from '../app/utils/db.server';
import { vectorSearch } from '../server/vector/vector-search.service';

// Test scenarios (de simple a complejo)
const testScenarios = [
  {
    name: 'B√∫squeda Simple',
    query: '¬øCu√°nto cuesta el plan Pro?',
    expectedSearches: 1,
    description: 'Pregunta directa que requiere 1 b√∫squeda'
  },
  {
    name: 'B√∫squeda Comparativa',
    query: 'Compara los planes Starter y Pro',
    expectedSearches: 2,
    description: 'Deber√≠a hacer 2 b√∫squedas separadas (starter, pro) y combinar resultados'
  },
  {
    name: 'Pregunta Multi-tema',
    query: '¬øCu√°nto cuestan los planes y qu√© formas de pago aceptan?',
    expectedSearches: 2,
    description: 'Dos temas distintos: precios + m√©todos de pago'
  },
  {
    name: 'Investigaci√≥n Profunda',
    query: 'Dame un resumen completo de todos los servicios que ofrece Formmy',
    expectedSearches: 3,
    description: 'Deber√≠a buscar en m√∫ltiples categor√≠as para dar respuesta exhaustiva'
  }
];

/**
 * Simula b√∫squedas ag√©nticas (sin ejecutar agente completo)
 */
async function simulateAgenticSearch(chatbotId: string, query: string) {
  console.log(`\nüîç Query: "${query}"\n`);

  const results = await vectorSearch(query, chatbotId, 5);

  console.log(`   Resultados encontrados: ${results.length}`);

  if (results.length > 0) {
    console.log('\n   Top 3 resultados:');
    results.slice(0, 3).forEach((r, idx) => {
      const source = r.metadata.fileName || r.metadata.url || r.metadata.title || 'Sin fuente';
      console.log(`   ${idx + 1}. [${(r.score * 100).toFixed(1)}%] ${source}`);
      console.log(`      "${r.content.substring(0, 80)}..."`);
    });
  } else {
    console.log('   ‚ö†Ô∏è  No se encontraron resultados');
  }

  return results;
}

async function main() {
  console.log('\nüß™ TEST DE RAG AG√âNTICO\n');
  console.log('Este test simula b√∫squedas que un agente deber√≠a ejecutar.\n');

  // 1. Encontrar un chatbot PRO+ con embeddings
  const chatbots = await db.chatbot.findMany({
    where: {
      user: {
        plan: {
          in: ['PRO', 'ENTERPRISE', 'TRIAL']
        }
      },
      isActive: true
    },
    select: {
      id: true,
      name: true,
      user: {
        select: { plan: true }
      }
    },
    take: 5
  });

  if (chatbots.length === 0) {
    console.log('‚ùå No hay chatbots PRO+ activos para probar.\n');
    return;
  }

  // Verificar cu√°l tiene embeddings
  let selectedChatbot: any = null;

  for (const chatbot of chatbots) {
    const embeddingCount = await db.embedding.count({
      where: { chatbotId: chatbot.id }
    });

    if (embeddingCount > 0) {
      selectedChatbot = { ...chatbot, embeddingCount };
      break;
    }
  }

  if (!selectedChatbot) {
    console.log('‚ùå Ning√∫n chatbot PRO+ tiene embeddings. Ejecuta primero la migraci√≥n.\n');
    console.log('   npx tsx scripts/migrate-contexts-to-embeddings.ts --all\n');
    return;
  }

  console.log(`‚úÖ Chatbot seleccionado: ${selectedChatbot.name}`);
  console.log(`   Plan: ${selectedChatbot.user.plan}`);
  console.log(`   Embeddings: ${selectedChatbot.embeddingCount}\n`);
  console.log('‚îÄ'.repeat(80));

  // 2. Ejecutar escenarios de test
  for (let i = 0; i < testScenarios.length; i++) {
    const scenario = testScenarios[i];

    console.log(`\n\nüìã ESCENARIO ${i + 1}: ${scenario.name}`);
    console.log(`   ${scenario.description}`);
    console.log(`   B√∫squedas esperadas: ${scenario.expectedSearches}`);

    await simulateAgenticSearch(selectedChatbot.id, scenario.query);
  }

  // 3. Recomendaciones para testing manual
  console.log('\n\n‚îÄ'.repeat(80));
  console.log('\nüí° TESTING MANUAL RECOMENDADO:\n');
  console.log('Para verificar COMPORTAMIENTO AG√âNTICO real (no solo b√∫squedas simples):');
  console.log('');
  console.log('1. Abre tu chatbot en el dashboard');
  console.log('2. Prueba estas preguntas complejas:');
  console.log('   - "Compara todos tus planes y dime cu√°l recomiendas"');
  console.log('   - "¬øQu√© incluye cada plan y cu√°nto cuestan?"');
  console.log('   - "Dame info completa sobre precios, formas de pago y garant√≠as"');
  console.log('');
  console.log('3. Verifica en los logs del servidor:');
  console.log('   - Que ejecute M√öLTIPLES llamadas a search_context');
  console.log('   - Que combine resultados coherentemente');
  console.log('   - Que cite fuentes cuando usa documentos');
  console.log('');
  console.log('4. Se√±ales de RAG ag√©ntico funcionando:');
  console.log('   ‚úÖ Ejecuta 2+ b√∫squedas para preguntas complejas');
  console.log('   ‚úÖ Ajusta queries si primera b√∫squeda no es suficiente');
  console.log('   ‚úÖ Cita fuentes: "Seg√∫n [archivo]..." o "De acuerdo a..."');
  console.log('   ‚úÖ Dice "no encontr√©" si b√∫squeda falla (no adivina)');
  console.log('');
  console.log('‚ùå Se√±ales de RAG pasivo (problema):');
  console.log('   ‚ùå Solo 1 b√∫squeda para preguntas multi-tema');
  console.log('   ‚ùå Responde sin buscar cuando deber√≠a');
  console.log('   ‚ùå Adivina precios/datos en vez de buscarlos');
  console.log('');
  console.log('üìä Monitoreo en producci√≥n:');
  console.log('   Revisa tabla ToolUsage para ver estad√≠sticas de uso de search_context');
  console.log('   Queries frecuentes: SELECT data FROM ToolUsage WHERE toolName="search_context"');
  console.log('');
}

main()
  .catch(console.error)
  .finally(() => db.$disconnect());
